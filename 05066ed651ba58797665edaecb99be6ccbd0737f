{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a326be11_a40d01a1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1021820
      },
      "writtenOn": "2024-02-23T14:46:48Z",
      "side": 1,
      "message": "Please don\u0027t remove the `SafeRead` bound, it exists to avoid safety issues in Rust (`std::mem::transmute` is generally unsafe) and also protects against accidental use of types not designed for guest memory. I would suggest using the manual offset approach.",
      "revId": "05066ed651ba58797665edaecb99be6ccbd0737f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df588047_157f96f3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1021820
      },
      "writtenOn": "2024-02-23T14:47:36Z",
      "side": 1,
      "message": "Uh, ditto for `SafeWrite`, but without the safety concern. If you want to, maybe you can define `SafeWrite` for your unsized struct?",
      "parentUuid": "a326be11_a40d01a1",
      "revId": "05066ed651ba58797665edaecb99be6ccbd0737f",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "A maximum vote from a non-uploader is required for the \t              \u0027Code-Review\u0027 label. A minimum vote is blocking."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "05066ed651ba58797665edaecb99be6ccbd0737f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Someone must have done basic testing of the patch, and \t              it can\u0027t have failed for anyone."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Verified=MAX","label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "05066ed651ba58797665edaecb99be6ccbd0737f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}