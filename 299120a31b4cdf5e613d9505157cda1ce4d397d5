{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "233fe072_3636d0bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 23
      },
      "lineNbr": 0,
      "author": {
        "id": 1021821
      },
      "writtenOn": "2023-10-02T21:35:26Z",
      "side": 1,
      "message": "good work!",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78f9784b_a136cd51",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 70,
      "author": {
        "id": 1021820
      },
      "writtenOn": "2023-10-11T14:43:20Z",
      "side": 1,
      "message": "I think this only applies for integers? cppreference.com says:\n\n\u003e 0: for integer and floating point number conversions, leading zeros are used to pad the field instead of space characters. For integer numbers it is ignored if the precision is explicitly specified. For other conversions using this flag results in undefined behavior. It is ignored if - flag is present.",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f264fe0c_676602a1",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 70,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2023-10-11T16:38:13Z",
      "side": 1,
      "message": "Moved setting of pad_char when has_precision is true to the specifier blocks",
      "parentUuid": "78f9784b_a136cd51",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2480094a_332ef209",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 70,
      "author": {
        "id": 1021820
      },
      "writtenOn": "2023-10-11T19:01:28Z",
      "side": 1,
      "message": "Thanks, but can you remove it for `b\u0027f\u0027`? That looks like a mistake.",
      "parentUuid": "f264fe0c_676602a1",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "923cb0fb_f8a9ca0b",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 70,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2023-10-11T20:04:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2480094a_332ef209",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c5510eb_83f17d06",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 83,
      "author": {
        "id": 1021820
      },
      "writtenOn": "2023-10-11T14:43:20Z",
      "side": 1,
      "message": "Hmm, if there\u0027s a `.` but no digits, I think it just counts as zero, so you could simplify this. But I haven\u0027t tested that, I\u0027m just going by this from cppreference.com:\n\n\u003e `.` followed by integer number or `*`, or neither that specifies precision of the conversion. In the case when `*` is used, the precision is specified by an additional argument of type int, which appears before the argument to be converted, but after the argument supplying minimum field width if one is supplied. If the value of this argument is negative, it is ignored. If neither a number nor `*` is used, the precision is taken as zero. See the table below for exact effects of precision.",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60b28a88_100b0d2b",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 83,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2023-10-11T16:38:13Z",
      "side": 1,
      "message": "It behaves differently depending on the specifier. In integers its zero, but in floats it\u0027s 6, therefore, i set it as an Option and handle each case in the specifier part of the code.",
      "parentUuid": "9c5510eb_83f17d06",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3063783_2debe157",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 83,
      "author": {
        "id": 1021820
      },
      "writtenOn": "2023-10-11T18:56:34Z",
      "side": 1,
      "message": "Yes, but a single `.` is not the same as default precision, it\u0027s the same as `.0`. That\u0027s both what cppreference seems to say and also what this test program does on my MacBook:\n\n    \n    $ cat printf-blank-precision.c \n    #include \u003cstdio.h\u003e\n    #include \u003cmath.h\u003e\n    \n    int main(void)\n    {\n    \tprintf(\"%f\\n\", 3.141592);\n    \tprintf(\"%.f\\n\", 3.141592);\n    \tprintf(\"%.0f\\n\", 3.141592);\n    \tprintf(\"%.6f\\n\", 3.141592);\n    }\n    $ cc printf-blank-precision.c -o printf-blank-precision\n    $ ./printf-blank-precision \n    3.141592\n    3\n    3\n    3.141592",
      "parentUuid": "60b28a88_100b0d2b",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "785f83e4_e43ec571",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 83,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2023-10-11T20:04:58Z",
      "side": 1,
      "message": "That\u0027s true and I have indeed missed some cases, however, it\u0027s still necessary to keep track of whether the precission has been specified (beyond the dot) since the behavior isn\u0027t exactly the same.",
      "parentUuid": "a3063783_2debe157",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "710f45e4_94254df8",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 83,
      "author": {
        "id": 1021820
      },
      "writtenOn": "2023-10-11T20:08:08Z",
      "side": 1,
      "message": "Yes but can\u0027t you remove the code that checks if there are digits after the dot? It\u0027s just zero in that case.",
      "parentUuid": "785f83e4_e43ec571",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fa213a5_ea2a3d3c",
        "filename": "src/libc/stdio/printf.rs",
        "patchSetId": 23
      },
      "lineNbr": 83,
      "author": {
        "id": 1021822
      },
      "writtenOn": "2023-10-11T20:19:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "710f45e4_94254df8",
      "revId": "299120a31b4cdf5e613d9505157cda1ce4d397d5",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}